package com.testMysqlStress.function;

import java.util.ArrayList;
import java.util.Date;
import java.util.Random;

import com.testMysqlStress.dom.paraFileBean;
import com.testMysqlStress.statistic.statisticInfo;
import com.testMysqlStress.threads.runMysqlCreatetb;
import com.testMysqlStress.threads.runMysqlDelete;
import com.testMysqlStress.threads.runMysqlInsert;
import com.testMysqlStress.threads.runMysqlSelect;
import com.testMysqlStress.threads.runMysqlUpdate;
import com.testMysqlStress.threads.runStatistic;

public class main2 {

	public static void main(String[] args) {
		
		
		commonkit ck = new commonkit();
		ArrayList paraList = ck.fetchLine("/home/lming/myDevelopment/testMysqlStress/common_1");//按行读取配置文件
//		ArrayList paraList = ck.fetchLine(args[0]);//按行读取配置文件
		String[] str = null; 
		paraFileBean pfb0 = (paraFileBean)paraList.get(0);
		str = pfb0.getFileLine().split(":");
		String host = str[1];
		paraFileBean pfb1 = (paraFileBean)paraList.get(1);
		str = pfb1.getFileLine().split(":");
		String user = str[1];
		paraFileBean pfb2 = (paraFileBean)paraList.get(2);
		str = pfb2.getFileLine().split(":");
		String pass = str[1];
		paraFileBean pfb3 = (paraFileBean)paraList.get(3);
		str = pfb3.getFileLine().split(":");
		String port = str[1];
		paraFileBean pfb4 = (paraFileBean)paraList.get(4);
		str = pfb4.getFileLine().split(":");
		String db = str[1];
		paraFileBean pfb5 = (paraFileBean)paraList.get(5);
		str = pfb5.getFileLine().split(":");
		String tbType = str[1];
		String tbField = str[2];
		String tbFieldNum = str[3];
		paraFileBean pfb6 = (paraFileBean)paraList.get(6);
		str = pfb6.getFileLine().split(":");
		String selectThreads = str[1];
		String paraFiled = str[2];
		String paraCondition = str[3];
		paraFileBean pfb7 = (paraFileBean)paraList.get(7);
		str = pfb7.getFileLine().split(":");
		String insertThreads = str[1];
		String insertValue = str[2];
		String insertFieldnum = str[3];
		paraFileBean pfb8 = (paraFileBean)paraList.get(8);
		str = pfb8.getFileLine().split(":");
		String updateThreads = str[1];
		paraFileBean pfb9 = (paraFileBean)paraList.get(9);
		str = pfb9.getFileLine().split(":");
		String deleteThreads = str[1];
		paraFileBean pfb10 = (paraFileBean)paraList.get(10);
		str = pfb10.getFileLine().split(":");
		String exeType = str[1];
		paraFileBean pfb11 = (paraFileBean)paraList.get(11);
		str = pfb11.getFileLine().split(":");
		String lasting = str[1];
		paraFileBean pfb12 = (paraFileBean)paraList.get(12);
		str = pfb12.getFileLine().split(":");
		String createtb = str[1];
		paraFileBean pfb13 = (paraFileBean)paraList.get(13);
		str = pfb13.getFileLine().split(":");
		int tbnum = Integer.valueOf(str[1]);
		paraFileBean pfb14 = (paraFileBean)paraList.get(14);
		str = pfb14.getFileLine().split(":");
		int interval = Integer.valueOf(str[1]);
		
//		System.out.println(" host,user,pass,port,db,tbType,select,insert,update,delete: "+host+","+user+","+pass+","+port+","+db+","+tbType+","+selectThreads+";");
		
		System.out.println("Mysql Stress Testing tool .");
		controlMySql ctMysql = new controlMySql(host,user,pass,port,db);
		Random rand = new Random();
//		statisticInfo ssi = new statisticInfo();
		Long start = 0l;
		Long exeTime = 0l;
				
		
		
		if(tbType.equals("common")) {
			System.out.println("普通表操作：");
			//建表
			if(createtb.equals("1")) {

				ctMysql.createtb("common",tbnum,tbField,Integer.valueOf(tbFieldNum));
				
			}
			
			if(exeType.equals("count")) {
				int loop = Integer.valueOf(lasting);//记次
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
			
				for(int i=0;i<loop;i++) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("common - count - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				}
			}
			
//			--
			if(exeType.equals("time")) {
				int time = Integer.valueOf(lasting);//计时
				Long max = ck.Time()+time * 1000;
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
				start = ck.Time();
//				System.out.println("1 - start "+start);
				while(ck.Time() < max) {
//					exeTime = ck.Time() + 10000;
//					Thread t = new Thread(new runStatistic(insertthreadnum));

//					}
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
							
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("common - time - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
					//打印流水
					Thread reportT = new Thread(new runStatistic(insertthreadnum,selectthreadnum,deletethreadnum,updatethreadnum));
					reportT.start();
//					try {
//						reportT.sleep(interval);
//					
//					}catch (Exception e) {
//						e.printStackTrace();
//					}
					
				}
				
				
			}
			
		}
		
		if(tbType.equals("hash")) {
			System.out.println("hash分片表操作：");
			//建表
			if(createtb.equals("1")) {
				ctMysql.createtb("hash",tbnum,tbField,Integer.valueOf(tbFieldNum));
			}
			
			if(exeType.equals("count")) {
				int loop = Integer.valueOf(lasting);//记次
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
			
				for(int i=0;i<loop;i++) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("hash - count - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				}
			}
			
//			--
			if(exeType.equals("time")) {
				int time = Integer.valueOf(lasting);//计时
				Long max = ck.Time()+time * 1000;
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
				
				while(ck.Time() < max) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						
						
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
				
				
			}
		}
		
		if(tbType.equals("list")) {
			System.out.println("list分片表操作：");
			//建表
			if(createtb.equals("1")) {
				ctMysql.createtb("list",tbnum,tbField,Integer.valueOf(tbFieldNum));
			}
			
			if(exeType.equals("count")) {
				int loop = Integer.valueOf(lasting);//记次
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
			
				for(int i=0;i<loop;i++) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("list - count - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				}
			}
			
//			--
			if(exeType.equals("time")) {
				int time = Integer.valueOf(lasting);//计时
				Long max = ck.Time()+time * 1000;
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
				
				while(ck.Time() < max) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("list - time - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
				
				
			}
		}
		
		if(tbType.equals("range")) {
			System.out.println("range分片表操作：");
			//建表
			if(createtb.equals("1")) {
				ctMysql.createtb("range",tbnum,tbField,Integer.valueOf(tbFieldNum));
			}
			
			if(exeType.equals("count")) {
				int loop = Integer.valueOf(lasting);//记次
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
			
				for(int i=0;i<loop;i++) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("range - count - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				}
			}
			
//			--
			if(exeType.equals("time")) {
				int time = Integer.valueOf(lasting);//计时
				Long max = ck.Time()+time * 1000;
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
				
				while(ck.Time() < max) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("range - time - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
				
				
			}
		}
		
		if(tbType.equals("mod")) {
			System.out.println("mod分片表操作：");
			//建表
			if(createtb.equals("1")) {
				ctMysql.createtb("mod",tbnum,tbField,Integer.valueOf(tbFieldNum));
			}
			
			if(exeType.equals("count")) {
				int loop = Integer.valueOf(lasting);//记次
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
			
				for(int i=0;i<loop;i++) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("mod - count - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				}
			}
			
//			--
			if(exeType.equals("time")) {
				int time = Integer.valueOf(lasting);//计时
				Long max = ck.Time()+time * 1000;
				int insertthreadnum = Integer.valueOf(insertThreads);//普通表写入并发
				int updatethreadnum = Integer.valueOf(updateThreads);
				int deletethreadnum = Integer.valueOf(deleteThreads);
				int selectthreadnum = Integer.valueOf(selectThreads);
				
				while(ck.Time() < max) {
					for(int a = 0;a<insertthreadnum;a++) {
						Thread ta = new Thread(new runMysqlInsert(host,user,pass,port,db,tbType,tbnum,insertValue,Integer.valueOf(insertFieldnum),interval));
						ta.start();
						try {
							ta.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
//						System.out.println("mod - time - insert");
					}
					for(int b = 0;b<updatethreadnum;b++) {
						Thread tb = new Thread(new runMysqlUpdate(host,user,pass,port,db,tbType));
						tb.start();
						try {
							tb.sleep(50);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int c = 0;c<deletethreadnum;c++) {
						Thread tc = new Thread(new runMysqlDelete(host,user,pass,port,db,tbType));
						tc.start();
						try {
							tc.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					for(int d = 0;d<selectthreadnum;d++) {
						Thread td = new Thread(new runMysqlSelect(host,user,pass,port,db,tbType,paraFiled,paraCondition,rand.nextInt(tbnum)));
						td.start();
						try {
							td.sleep(0);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
				
				
			}
		}
		
		System.out.println("");
		System.out.println("");
		System.out.println("");
		if(!(insertThreads.equals("0"))) {
			System.out.println("完成插入事务总数 : "+ctMysql.tnums+" , 插入事务总耗时 : "+ctMysql.tall+"毫秒 , 插入事务用时最短 : "+ctMysql.tfasted+"毫秒 ,"
					+ " 插入事务用时最长 : "+ctMysql.tslowed+ "毫秒, 平均耗时 : "+ ctMysql.tall / ctMysql.tnums+"毫秒，失败插入事务数： "+(ctMysql.tfnums-1)+" 。");
		}
		
		System.out.println("");
		if(!(selectThreads.equals("0"))) {
			System.out.println("读取事务总数 : "+ctMysql.qnums+" , 读取事务总耗时 : "+ctMysql.qall+"毫秒 , 读取事务用时最短 : "+ctMysql.qfasted+"毫秒 ,"
					+ " 读取事务用时最长 : "+ctMysql.qslowed+ "毫秒, 平均耗时 : "+ ctMysql.qall / ctMysql.qnums+"毫秒，失败查询事务数 ： "+(ctMysql.qfnums-1)+" 。");
		}
		
		
	}

}
